Subject: [PATCH] Re-add sample unit test
Re-add sample unit test
---
Index: client3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client3.py b/client3.py
--- a/client3.py	(revision adfe3edb083e98e5ed0691f85343f859717b17da)
+++ b/client3.py	(revision 7c63916e85d1df50abc0cf88f2a0dd1d7a3903f0)
@@ -30,19 +30,18 @@
 
 
 def getDataPoint(quote):
-    """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
+
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
-    """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return
+    return price_a / price_b
 
 
 # Main
@@ -52,8 +51,10 @@
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
Index: client_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client_test.py b/client_test.py
--- a/client_test.py	(revision 30bfc34a0bf308bb2a953303013d7aa0bf076ee4)
+++ b/client_test.py	(revision b0645cc618a63d2358521a519f4a1a8daf713c67)
@@ -12,8 +12,11 @@
              'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
         ]
         for quote in quotes:
-            self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'],
-                                                   (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
+            self.assertEqual(getDataPoint(quote),
+                             (quote["stock"], quote['top_bid']['price'], quote['top_ask']['price'],
+                              (quote['top_bid']['price'] + quote['top_ask']['price']) / 2
+                              )
+                             )
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
    quotes = [
